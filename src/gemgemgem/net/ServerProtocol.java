package gemgemgem.net;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.Consumer;

import gemgemgem.controller.MatchC;

/**
 * It extends the Protocol class since it used to describe the unique behavior
 * of the server in response of the messages and the requests received by the
 * client.
 * 
 * @author pas
 *
 */
public class ServerProtocol extends Protocol {

	// ATTRIBUTES
	Server server;

	// CONSTRUCTOR
	public ServerProtocol(MatchC match, Server server) {
		super(match);
		this.server = server;
		this.commandMap.put("SYNCH", e -> ((ServerProtocol) e.getSender()).synch());
		this.commandMap.put("CLOSE", e -> ((ServerProtocol) e.getSender()).close());
		match.setProtocol(this);
		match.setTurn(true);
	}

	//METHODS
	/**
	 * When the "SYNCH" command is received, this method retrieve all the
	 * informations needed to synchronize another player to the state of the game
	 * this instance is referring to and send them.
	 */
	private void synch() {
		ArrayList<String> inizializationInfos = match.getInitializationInfos();
		for (String s : inizializationInfos) {
			send(s);
		}
	}
	
	/**
	 * When the "CLOSE" command is received, this method makes the server stop running.
	 */
	private void close() {
		server.setRunning(false);
	}
	
	/**
	 * It report a message that has been generated by the player to the server that
	 * will forward it to the other player through the server-client connection.
	 * 
	 * @param message : String - the message that has to be sent
	 */
	public void send(String message) {
		server.sendMessage(message);
	}

}
