package gemgemgem.net;

import java.util.ArrayList;

import gemgemgem.controller.MatchC;

/**
 * It extends the Protocol class since it used to describe the unique behavior
 * of the client in response of the messages and the requests received by the
 * server.
 * 
 * @author pas
 *
 */
public class ClientProtocol extends Protocol {

	// ATTRIBUTES
	Client client;

	// CONSTRUCTOR
	public ClientProtocol(MatchC match, Client client) {
		super(match);
		this.client = client;
		/*
		 * These are some peculiar commands that can only be executed by the client and
		 * not by the server
		 */
		this.commandMap.put("GEM", e -> ((ClientProtocol) e.getSender()).setGem(e.getParameters()));
		this.commandMap.put("CLOSE", e -> ((ClientProtocol) e.getSender()).close());
		match.setProtocol(this);
		match.setTurn(false);
	}

	// METHODS
	/**
	 * When the "GEM" command is received, this method set the gem described by the
	 * parameters in his place through the help of the match's controller.</br></br>
	 * 
	 * The parameters are: index of the gem, X coordinate, Y coordinate
	 * 
	 * @param parameters : ArrayList<String> - It contains all the informations
	 *                   about the gem that has to be set
	 */
	private void setGem(ArrayList<String> parameters) {
		match.setGem(Integer.parseInt(parameters.get(0)), Integer.parseInt(parameters.get(1)),
				Integer.parseInt(parameters.get(2)));
	}

	/**
	 * When the "CLOSE" command is received, this method makes the client disconnect
	 * from the server.
	 */
	public void close() {
		client.setRunning(false);
	}

	/**
	 * It report a message that has been generated by the player to the client that
	 * will forward it to the other player through the server-client connection.
	 * 
	 * @param message : String - the message that has to be sent
	 */
	public void send(String message) {
		client.sendMessage(message);
	}

}
